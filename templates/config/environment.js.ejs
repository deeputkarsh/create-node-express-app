const {
  PORT,
  NODE_ENV,
  BASE_URL = ''<% if(useMongoose) { -%>,
  MONGO_URI,
  MONGO_DEBUG,
  MONGO_SSL_CA,
  MONGO_SSL_CERT,
  MONGO_SSL_KEY<% } if(useJwt) { %>,
  JWT_SECRET,
  TOKEN_VALIDITY<% } if(useCors) { %>,
  ALLOW_CORS_ORIGIN,
  ALLOW_CORS_METHODS<% } %>
} = process.env

export const SERVER_CONFIG = {
  PORT,
  NODE_ENV,
  BASE_URL
}
<% if(useMongoose) { -%>

export const MONGO_CONFIG = {
  URI: MONGO_URI,
  DEBUG: MONGO_DEBUG,
  SSl_CA: MONGO_SSL_CA,
  SSl_CERT: MONGO_SSL_CERT,
  SSl_KEY: MONGO_SSL_KEY
}
<% } if(useJwt) { -%>

export const JWT_CONFIG = {
  SECRET: JWT_SECRET,
  TOKEN_VALIDITY,
  NO_AUTH_PATHS: [
    '/health'
  ]
}
<% } if(useCors) { -%>

export const CORS_OPTIONS = ALLOW_CORS_ORIGIN === '*' ? undefined : {
  origin: ALLOW_CORS_ORIGIN.includes(',') ? ALLOW_CORS_ORIGIN.split(',') : ALLOW_CORS_ORIGIN,
  methods: ALLOW_CORS_METHODS,
  optionsSuccessStatus: 200
}
<% } -%>

export const checkEnvVars = () => {
  /*
  * Code to check if required enviroment variables are set to run the application
  */
  const applicationEnvVars = [
    'NODE_ENV',
    'PORT'<% if(useMongoose) { -%>,
    'MONGO_URI'<% } if(useJwt) { -%>,
    'JWT_SECRET',
    'TOKEN_VALIDITY'<% } %>
  ]
  const unusedEnvVars = applicationEnvVars.filter((i) => !process.env[i])
  if (unusedEnvVars.length) {
    console.error('Required ENV variables are not set: [' + unusedEnvVars.join(', ') + ']')
    process.exit(1)
  }
}
